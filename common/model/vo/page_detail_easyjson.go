// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	po "node_puppeteer_example_go/common/model/po"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo(in *jlexer.Lexer, out *PageDetailResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			if in.IsNull() {
				in.Skip()
				out.Page = nil
			} else {
				if out.Page == nil {
					out.Page = new(po.ComicPage)
				}
				(*out.Page).UnmarshalEasyJSON(in)
			}
		case "next_page":
			if in.IsNull() {
				in.Skip()
				out.NextPage = nil
			} else {
				if out.NextPage == nil {
					out.NextPage = new(po.ComicPage)
				}
				(*out.NextPage).UnmarshalEasyJSON(in)
			}
		case "comic":
			if in.IsNull() {
				in.Skip()
				out.Comic = nil
			} else {
				if out.Comic == nil {
					out.Comic = new(po.Comic)
				}
				(*out.Comic).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo(out *jwriter.Writer, in PageDetailResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		if in.Page == nil {
			out.RawString("null")
		} else {
			(*in.Page).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"next_page\":"
		out.RawString(prefix)
		if in.NextPage == nil {
			out.RawString("null")
		} else {
			(*in.NextPage).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"comic\":"
		out.RawString(prefix)
		if in.Comic == nil {
			out.RawString("null")
		} else {
			(*in.Comic).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageDetailResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageDetailResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageDetailResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageDetailResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo(l, v)
}
func easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo1(in *jlexer.Lexer, out *PageDetailParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PageId":
			out.PageId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo1(out *jwriter.Writer, in PageDetailParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PageId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageDetailParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageDetailParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB7d71091EncodeNodePuppeteerExampleGoCommonModelVo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageDetailParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageDetailParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB7d71091DecodeNodePuppeteerExampleGoCommonModelVo1(l, v)
}
