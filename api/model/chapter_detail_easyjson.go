// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel(in *jlexer.Lexer, out *ChapterDetailResponseComic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "intro":
			out.Intro = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel(out *jwriter.Writer, in ChapterDetailResponseComic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"intro\":"
		out.RawString(prefix)
		out.String(string(in.Intro))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChapterDetailResponseComic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChapterDetailResponseComic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChapterDetailResponseComic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChapterDetailResponseComic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel(l, v)
}
func easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel1(in *jlexer.Lexer, out *ChapterDetailResponseChapter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel1(out *jwriter.Writer, in ChapterDetailResponseChapter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int(int(in.Sequence))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChapterDetailResponseChapter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChapterDetailResponseChapter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChapterDetailResponseChapter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChapterDetailResponseChapter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel1(l, v)
}
func easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel2(in *jlexer.Lexer, out *ChapterDetailResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chapter":
			if in.IsNull() {
				in.Skip()
				out.Chapter = nil
			} else {
				if out.Chapter == nil {
					out.Chapter = new(ChapterDetailResponseChapter)
				}
				(*out.Chapter).UnmarshalEasyJSON(in)
			}
		case "next_chapter":
			if in.IsNull() {
				in.Skip()
				out.NextChapter = nil
			} else {
				if out.NextChapter == nil {
					out.NextChapter = new(ChapterDetailResponseChapter)
				}
				(*out.NextChapter).UnmarshalEasyJSON(in)
			}
		case "comic":
			if in.IsNull() {
				in.Skip()
				out.Comic = nil
			} else {
				if out.Comic == nil {
					out.Comic = new(ChapterDetailResponseComic)
				}
				(*out.Comic).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel2(out *jwriter.Writer, in ChapterDetailResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chapter\":"
		out.RawString(prefix[1:])
		if in.Chapter == nil {
			out.RawString("null")
		} else {
			(*in.Chapter).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"next_chapter\":"
		out.RawString(prefix)
		if in.NextChapter == nil {
			out.RawString("null")
		} else {
			(*in.NextChapter).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"comic\":"
		out.RawString(prefix)
		if in.Comic == nil {
			out.RawString("null")
		} else {
			(*in.Comic).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChapterDetailResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChapterDetailResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChapterDetailResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChapterDetailResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel2(l, v)
}
func easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel3(in *jlexer.Lexer, out *ChapterDetailParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel3(out *jwriter.Writer, in ChapterDetailParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChapterDetailParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChapterDetailParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d5e63e5EncodeNodePuppeteerExampleGoApiModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChapterDetailParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChapterDetailParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d5e63e5DecodeNodePuppeteerExampleGoApiModel3(l, v)
}
