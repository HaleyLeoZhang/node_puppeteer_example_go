// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7d177735DecodeNodePuppeteerExampleGoApiModel(in *jlexer.Lexer, out *PageListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*ComicPage, 0, 8)
					} else {
						out.List = []*ComicPage{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ComicPage
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ComicPage)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeNodePuppeteerExampleGoApiModel(out *jwriter.Writer, in PageListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel(l, v)
}
func easyjson7d177735DecodeNodePuppeteerExampleGoApiModel1(in *jlexer.Lexer, out *PageListParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Channel":
			out.Channel = int(in.Int())
		case "SourceId":
			out.SourceId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeNodePuppeteerExampleGoApiModel1(out *jwriter.Writer, in PageListParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Channel\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Channel))
	}
	{
		const prefix string = ",\"SourceId\":"
		out.RawString(prefix)
		out.Int(int(in.SourceId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageListParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageListParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageListParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageListParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel1(l, v)
}
func easyjson7d177735DecodeNodePuppeteerExampleGoApiModel2(in *jlexer.Lexer, out *PageDetailResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			if in.IsNull() {
				in.Skip()
				out.Page = nil
			} else {
				if out.Page == nil {
					out.Page = new(ComicPage)
				}
				(*out.Page).UnmarshalEasyJSON(in)
			}
		case "next_page":
			if in.IsNull() {
				in.Skip()
				out.NextPage = nil
			} else {
				if out.NextPage == nil {
					out.NextPage = new(ComicPage)
				}
				(*out.NextPage).UnmarshalEasyJSON(in)
			}
		case "comic":
			if in.IsNull() {
				in.Skip()
				out.Comic = nil
			} else {
				if out.Comic == nil {
					out.Comic = new(Comic)
				}
				(*out.Comic).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeNodePuppeteerExampleGoApiModel2(out *jwriter.Writer, in PageDetailResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		if in.Page == nil {
			out.RawString("null")
		} else {
			(*in.Page).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"next_page\":"
		out.RawString(prefix)
		if in.NextPage == nil {
			out.RawString("null")
		} else {
			(*in.NextPage).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"comic\":"
		out.RawString(prefix)
		if in.Comic == nil {
			out.RawString("null")
		} else {
			(*in.Comic).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageDetailResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageDetailResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageDetailResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageDetailResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel2(l, v)
}
func easyjson7d177735DecodeNodePuppeteerExampleGoApiModel3(in *jlexer.Lexer, out *PageDetailParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PageId":
			out.PageId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeNodePuppeteerExampleGoApiModel3(out *jwriter.Writer, in PageDetailParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PageId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageDetailParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageDetailParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageDetailParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageDetailParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel3(l, v)
}
func easyjson7d177735DecodeNodePuppeteerExampleGoApiModel4(in *jlexer.Lexer, out *ComicPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Model = new(Model)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = int(in.Int())
		case "source_id":
			out.SourceId = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "progress":
			out.Progress = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7d177735EncodeNodePuppeteerExampleGoApiModel4(out *jwriter.Writer, in ComicPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Channel))
	}
	{
		const prefix string = ",\"source_id\":"
		out.RawString(prefix)
		out.Int(int(in.SourceId))
	}
	{
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int(int(in.Sequence))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"progress\":"
		out.RawString(prefix)
		out.Int(int(in.Progress))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComicPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComicPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7d177735EncodeNodePuppeteerExampleGoApiModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComicPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComicPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7d177735DecodeNodePuppeteerExampleGoApiModel4(l, v)
}
